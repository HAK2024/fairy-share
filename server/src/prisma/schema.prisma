// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int    @id @default(autoincrement())
  name           String
  email          String @unique
  hashedPassword String

  // You can't set default color in ENUM, so you need to set it when you create an actual record

  icon       IconColor
  userHouses UserHouse[]
  tasks      Task[]
  expenses   Expense[]
  payments   Payment[]
}

// I put the random color in IconColor, so you can change them to different colors if you need to

enum IconColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  INDIGO
  VIOLET
  BLACK
  WHITE
}

model UserHouse {
  id      Int     @id @default(autoincrement())
  userId  Int
  houseId Int
  isAdmin Boolean @default(false)
  user    User?   @relation(fields: [userId], references: [id])
  house   House?  @relation(fields: [houseId], references: [id])

  @@unique([userId, houseId])
}

model House {
  id               Int         @id @default(autoincrement())
  name             String
  isExpensePerTime Boolean     @default(true)
  rules            Rule[]
  userHouses       UserHouse[]
  tasks            Task[]
  expenses         Expense[]
}

model Rule {
  id      Int    @id @default(autoincrement())
  text    String
  houseId Int
  house   House? @relation(fields: [houseId], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  note        String?
  houseId     Int
  assigneeId  Int
  // Add this column to track if the task is complete or not
  // I thought date column is supposed to be used for this purpose, but it's used for the date when the task has to be done
  isCompleted Boolean  @default(false)
  house       House?   @relation(fields: [houseId], references: [id])
  user        User?    @relation(fields: [assigneeId], references: [id])
}

model Expense {
  id              Int              @id @default(autoincrement())
  itemName        String
  fee             Float
  date            DateTime
  houseId         Int
  buyerId         Int
  house           House?           @relation(fields: [houseId], references: [id])
  user            User?            @relation(fields: [buyerId], references: [id])
  payments        Payment[]
  expensePayments ExpensePayment[]
}

model Payment {
  id              Int              @id @default(autoincrement())
  fee             Float
  paidDate        DateTime
  expenseId       Int
  payerId         Int
  expense         Expense?         @relation(fields: [expenseId], references: [id])
  user            User?            @relation(fields: [payerId], references: [id])
  expensePayments ExpensePayment[]
}

model ExpensePayment {
  id        Int      @id @default(autoincrement())
  expenseId Int
  paymentId Int
  expense   Expense? @relation(fields: [expenseId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@unique([expenseId, paymentId])
}
