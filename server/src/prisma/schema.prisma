// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int    @id @default(autoincrement())
  name           String @db.VarChar(20)
  email          String @unique @db.VarChar(50)
  hashedPassword String?

  // You can't set default color in ENUM, so you need to set it when you create an actual record

  icon       IconColor
  userHouses UserHouse[]
  tasks      Task[]
  expenses   Expense[]
  payments   Payment[]
}

// I put the random color in IconColor, so you can change them to different colors if you need to

enum IconColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  INDIGO
  VIOLET
  BLACK
  WHITE
}

model UserHouse {
  id      Int     @id @default(autoincrement())
  userId  Int
  houseId Int
  isAdmin Boolean @default(false)
  user    User?   @relation(fields: [userId], references: [id])
  house   House?  @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@unique([userId, houseId])
}

model House {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar(100)
  isExpensePerTime Boolean     @default(true)
  rules            Rule[]
  userHouses       UserHouse[]
  tasks            Task[]
  expenses         Expense[]
}

model Rule {
  id      Int    @id @default(autoincrement())
  text    String @db.VarChar(200)
  houseId Int
  house   House? @relation(fields: [houseId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  date        DateTime
  note        String?  @db.VarChar(200)
  houseId     Int
  assigneeId  Int
  isCompleted Boolean  @default(false)
  house       House?   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [assigneeId], references: [id])
}

model Expense {
  id       Int       @id @default(autoincrement())
  itemName String    @db.VarChar(100)
  fee      Float
  date     DateTime
  houseId  Int
  buyerId  Int
  house    House?    @relation(fields: [houseId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [buyerId], references: [id])
  payments Payment[]
}

model Payment {
  id        Int       @id @default(autoincrement())
  fee       Float
  paidDate  DateTime?
  expenseId Int
  payerId   Int
  expense   Expense?  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [payerId], references: [id])

  @@unique([expenseId, payerId])
}
